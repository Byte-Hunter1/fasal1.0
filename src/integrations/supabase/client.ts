// This file is automatically generated. Do not edit it directly.
// @ts-ignore - Ignoring missing module declaration
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Add Vite-specific type augmentation for import.meta.env
declare global {
  interface ImportMeta {
    env: Record<string, string | undefined>;
  }
}

const SUPABASE_URL = import.meta.env?.VITE_SUPABASE_URL || "https://zjzepvoklqnubjpfqjoz.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env?.VITE_SUPABASE_PUBLISHABLE_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpqemVwdm9rbHFudWJqcGZxam96Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc2MDc0NjgsImV4cCI6MjA3MzE4MzQ2OH0.U8KnFTl3S9Osb18WMD8P62qbv9YwDSj3LlcU473lEaA";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Check if window is defined to ensure we're in a browser environment
const isBrowser = typeof window !== 'undefined';

// Create the Supabase client with proper type safety
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: isBrowser ? localStorage : undefined,
    persistSession: isBrowser,
    autoRefreshToken: isBrowser,
  }
});

// Type guard to check if a response has an error
export function hasError<T>(response: { data: T | null; error: Error | null }): response is { data: null; error: Error } {
  return response.error !== null;
}

// Helper function to safely handle Supabase responses
export async function safeQuery<T>(queryFn: Promise<{ data: T | null; error: Error | null }>): Promise<T | null> {
  try {
    const response = await queryFn;
    if (hasError(response)) {
      console.error('Supabase query error:', response.error);
      return null;
    }
    return response.data;
  } catch (err) {
    console.error('Unexpected error during Supabase query:', err);
    return null;
  }
}